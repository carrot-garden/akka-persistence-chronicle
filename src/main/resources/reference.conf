#
# Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
#

##################################################################
# Akka Persistence Chronicle Plugin Reference Configuration File #
##################################################################

# This is the reference file with default settings.
# Make your edits and overrides in your application.conf.

##################################################################
# 
# Purpose
#
# Provides Akka Persistence plugin built on top of Chronicle Queue 
# and Chronicle Map with Akka Cluster as CRDT backing store.
#
# Design
#
# Persistence Journal is backed by the Chronicle Queue 
# and Persistence Snapshot Store is backed by the Chronicle Map.
# Internal plugin Journal/Snapshot persistence commands are replicated 
# to all cluster members running the cluster extension provided by this plugin.
# Both Journal and Snapshot are only eventually consistent 
# in the cluster in the loose CRDT sense.
#
# Use case
#
# Persistent Actor cluster node fail-over under control of Cluster Singleton.
#
# Deployment
#
# Provide configuration stanza in application.conf 
# to activate persistence plugin actors.
#
#      akka.persistence {
#        journal {
#          plugin = "akka.persistence.chronicle.journal" 
#        }
#        snapshot-store {
#          plugin = "akka.persistence.chronicle.snapshot-store"
#        }
#      }
#
##################################################################

# Actor system settings required by the plugin.
akka {
    # Actor serialization.
    actor {
        # Serialization for chronicle replication messages.
        serializers {
            akka-persistence-chronicle = "akka.persistence.chronicle.ExtensionSerializer"
        }
        # Bindings for chronicle serialization extension types. 
        serialization-bindings {
            "akka.persistence.chronicle.ReplicationProtocol$Marker" = akka-persistence-chronicle
        }
    }
    # Activate chronicle persistence extension.
    extensions = [ "akka.persistence.chronicle.ChronicleExtension" ]
    # Configure cluster for chronicle persistence replication.
    cluster {
        # Provide roles bound to nodes running the chronicle extension.
        roles += ${akka.persistence.chronicle.extension.replicator.role}
    }
}

#
# Akka persistence storage plugin on top of ChronicleMap and ChronicleQueue.
# ChronicleMap https://github.com/OpenHFT/Chronicle-Map
# ChronicleQueue https://github.com/OpenHFT/Chronicle-Queue
akka.persistence.chronicle {

    # Chronicle cluster replication extension.
    extension {
        # Replication coordination actor.
        replicator {
            # Actor name: /user/chronicle-replicator
            name = "chronicle-replicator"
            # Provide a node role marker for replication cluster members.
            role = "chronicle-persistence"
        }
        # Enable chronicle replication in cluster.
        cluster-enable = false
        # Expose replication commands on the system event stream. Used in tests.
        expose-replication-stream = false
        # Expose plugin notification events on the system event stream. Used in tests.
        expose-notification-stream = false
    }
    
    # Persistent store serialization.
    serializer {
        # Unique serialization identifier. Must not conflict with any other in an akka system.
        identifier = 888
    }
    
    # Akka persistence journal on top of ChronicleQueue.
    # Plugin creates a JournalProvider for each persistence id.
    # JournalProvider contains 2 actual ChronicleQueue segments: "previous" and "current".
    # JournalProvider segments need periodic rotation to reclaim disk space used by the queues.
    # Both "previous" and "current" are used for message replay, while only "current" is used for message append.
    journal {
        # Standard persistence property: FQCN of class implementing akka.persistence.journal.SyncWriteJournal.
        class = "akka.persistence.chronicle.ChronicleSyncJournal"
        # Standard persistence property: dispatcher id to be used with the journal store actor. 
        plugin-dispatcher = akka.persistence.dispatchers.default-plugin-dispatcher
        # Location of chronicle queue memory mapped files. Use per-jvm-instance scope.
        folder = ${user.dir}/store/journal
        # Include sender actor reference in journal persistence store.
        persist-sender = false
        # Provide mapping from persistence id and a safe file system queue segment folder name.
        # FQCN of implementation of 'akka.persistence.chronicle.NamingMapper'. See also URLNamingMapper.
        naming-mapper = "akka.persistence.chronicle.DirectNamingMapper"
        # Chronicle Queue native settings for each persistence id.
        # Note that the queue on disk will grow unbounded without periodic segment rotation.
        chronicle-queue {
            # Force disk persistence on every append. Very slow.
            synchronous = false
            # Verify sufficient space for every write. Can be slow.
            useCheckedExcerpt = false
            # Upper limit of message size.
            messageCapacity = 256
            # File system allocation block for index.
            indexBlockSize = 4M
            # File system allocation block for messages.
            dataBlockSize = 16M
            # The size of the cache lines making up index files.
            cacheLineSize = 64
        }
    }

    # Akka persistence snapshot store on top of ChronicleMap.
    # Plugin keeps in-memory cache mapping each persistence id to the list of live stored snapshots.   
    # A single fixed-size memory-mapped ChronicleMap is used to store snapshots for each snapshot save command.
    snapshot-store {
        # Standard persistence property: FQCN of class implementing akka.persistence.snapshot.SnapshotStore.
        class = "akka.persistence.chronicle.ChronicleSnapshotStore"
        # Standard persistence property: dispatcher id to be used with the snapshot store actor. 
        plugin-dispatcher = akka.persistence.dispatchers.default-plugin-dispatcher
        # Location of chronicle index map and content map memory mapped files. Use per-jvm-instance scoped folder.
        folder = ${user.dir}/store/snapshot
        # Automatically limit stored snapshot history on every snapshot save command by this number.
        limit = 2
        # Chronicle Map native settings. 
        # Note that map uses fixed allocation. Used disk size = count * (keySize + valueSize). 
        # With default settings below the map will consume some 1GB of (sparse) file system disk space.
        chronicle-map {
            # Maximum map entry count.
            count = 16K
            # Average map entry key size.
            averageKeySize = 128
            # Average map entry value size.
            averageValueSize = 64K
            # Permit entry (keySize + valueSize) to grow on demand.
            maxChunksPerEntry = 64
        }
    }

    # Journal/Snapshot queue segment rotation coordinator for every persistence id.
    # Rotate journal queue segments automatically after a snapshot is followed by some journal events. 
    rotation-manager {
        # Enable automatic journal segment rotation.
        # Note: if you disable rotation, you must issue PluginJournalRotate commands form your actor code.
        rotate-enable = true
        # Number of events persisted after the last snapshot that will trigger queue segment rotation.
        # Segment queue rotation happens in background and will occur approximately at this message count boundary.
        message-count = 16K
    }

}
